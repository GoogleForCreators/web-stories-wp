diff --git a/node_modules/eslint-plugin-react-hooks/cjs/eslint-plugin-react-hooks.development.js b/node_modules/eslint-plugin-react-hooks/cjs/eslint-plugin-react-hooks.development.js
index ab3467d..ec54933 100644
--- a/node_modules/eslint-plugin-react-hooks/cjs/eslint-plugin-react-hooks.development.js
+++ b/node_modules/eslint-plugin-react-hooks/cjs/eslint-plugin-react-hooks.development.js
@@ -737,7 +737,26 @@ var ExhaustiveDeps = {
       enableDangerousAutofixThisMayCauseInfiniteLoops: false,
       properties: {
         additionalHooks: {
-          type: 'string'
+          anyOf: [
+            // An abbreviated form with a single RegExp with the implicit
+            // callback index == 0.
+            {type: 'string'},
+            // An expanded form: an array with RegExp and callback index
+            // values.
+            {
+              type: 'array',
+              items: {
+                type: 'object',
+                additionalProperties: false,
+                properties: {
+                  // The RegExp string.
+                  test: {type: 'string'},
+                  // The callback index.
+                  callbackIndex: {type: 'number'},
+                },
+              },
+            },
+          ],
         },
         enableDangerousAutofixThisMayCauseInfiniteLoops: {
           type: 'boolean'
@@ -747,7 +766,7 @@ var ExhaustiveDeps = {
   },
   create: function (context) {
     // Parse the `additionalHooks` regex.
-    var additionalHooks = context.options && context.options[0] && context.options[0].additionalHooks ? new RegExp(context.options[0].additionalHooks) : undefined;
+    var additionalHooks = parseAdditionalHooks(context.options && context.options[0] && context.options[0].additionalHooks);
     var enableDangerousAutofixThisMayCauseInfiniteLoops = context.options && context.options[0] && context.options[0].enableDangerousAutofixThisMayCauseInfiniteLoops || false;
     var options = {
       additionalHooks: additionalHooks,
@@ -2194,8 +2213,8 @@ function getReactiveHookCallbackIndex(calleeNode, options) {
 
     default:
       if (node === calleeNode && options && options.additionalHooks) {
-        // Allow the user to provide a regular expression which enables the lint to
-        // target custom reactive hooks.
+        // Allow the user to provide an array of regular expressions which
+        // enables the lint to target custom reactive hooks.
         var name;
 
         try {
@@ -2208,13 +2227,46 @@ function getReactiveHookCallbackIndex(calleeNode, options) {
           }
         }
 
-        return options.additionalHooks.test(name) ? 0 : -1;
+        var found = options.additionalHooks.find(({test}) => test.test(name));
+        return found ? found.callbackIndex : -1;
       } else {
         return -1;
       }
 
   }
 }
+
+/**
+ * Parses the `additionalHooks` configuration. It can be in one of the two
+ * formats:
+ * - a single string that indicates the RegExp and implicit callback index of 0;
+ * - an array of `{ test: string, callbackIndex: number }` objects.
+ *
+ * Returns the normalized form of this configuration object in the shape of
+ * `{  test: RegExp, callbackIndex: number }`.
+ *
+ * See `additionalHooks` schema definition for more info.
+ */
+function parseAdditionalHooks(additionalHooksConfig) {
+  if (!additionalHooksConfig) {
+    return undefined;
+  }
+
+  // A single string format.
+  if (typeof additionalHooksConfig === 'string') {
+    return [{test: new RegExp(additionalHooksConfig), callbackIndex: 0}];
+  }
+
+  // An array format.
+  if (Array.isArray(additionalHooksConfig)) {
+    return additionalHooksConfig.map(({test, callbackIndex}) => ({
+      test: new RegExp(test),
+      callbackIndex,
+    }));
+  }
+  throw new Error('Unknown format of additionalHooks');
+}
+
 /**
  * ESLint won't assign node.parent to references from context.getScope()
  *
