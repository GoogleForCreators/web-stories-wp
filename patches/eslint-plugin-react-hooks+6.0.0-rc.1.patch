diff --git a/node_modules/eslint-plugin-react-hooks/cjs/eslint-plugin-react-hooks.development.js b/node_modules/eslint-plugin-react-hooks/cjs/eslint-plugin-react-hooks.development.js
index 179bf42..2a18e7b 100644
--- a/node_modules/eslint-plugin-react-hooks/cjs/eslint-plugin-react-hooks.development.js
+++ b/node_modules/eslint-plugin-react-hooks/cjs/eslint-plugin-react-hooks.development.js
@@ -39,7 +39,26 @@ const rule$2 = {
                 enableDangerousAutofixThisMayCauseInfiniteLoops: false,
                 properties: {
                     additionalHooks: {
-                        type: 'string',
+                        anyOf: [
+                            // An abbreviated form with a single RegExp with the implicit
+                            // callback index == 0.
+                            { type: 'string' },
+                            // An expanded form: an array with RegExp and callback index
+                            // values.
+                            {
+                                type: 'array',
+                                items: {
+                                    type: 'object',
+                                        additionalProperties: false,
+                                        properties: {
+                                            // The RegExp string.
+                                            test: {type: 'string'},
+                                            // The callback index.
+                                            callbackIndex: {type: 'number'},
+                                        },
+                                },
+                            },
+                        ],
                     },
                     enableDangerousAutofixThisMayCauseInfiniteLoops: {
                         type: 'boolean',
@@ -49,11 +68,8 @@ const rule$2 = {
         ],
     },
     create(context) {
-        const additionalHooks = context.options &&
-            context.options[0] &&
-            context.options[0].additionalHooks
-            ? new RegExp(context.options[0].additionalHooks)
-            : undefined;
+        const additionalHooks = parseAdditionalHooks(context.options &&
+            context.options[0].additionalHooks);
         const enableDangerousAutofixThisMayCauseInfiniteLoops = (context.options &&
             context.options[0] &&
             context.options[0].enableDangerousAutofixThisMayCauseInfiniteLoops) ||
@@ -1324,13 +1340,44 @@ function getReactiveHookCallbackIndex(calleeNode, options) {
                         throw error;
                     }
                 }
-                return options.additionalHooks.test(name) ? 0 : -1;
+                const found = options.additionalHooks.find(({test}) => test.test(name));
+                return found ? found.callbackIndex : -1;
             }
             else {
                 return -1;
             }
     }
 }
+/**
+ * Parses the `additionalHooks` configuration. It can be in one of the two
+ * formats:
+ * - a single string that indicates the RegExp and implicit callback index of 0;
+ * - an array of `{ test: string, callbackIndex: number }` objects.
+ *
+ * Returns the normalized form of this configuration object in the shape of
+ * `{  test: RegExp, callbackIndex: number }`.
+ *
+ * See `additionalHooks` schema definition for more info.
+*/
+function parseAdditionalHooks(additionalHooksConfig) {
+  if (!additionalHooksConfig) {
+    return undefined;
+  }
+
+  // A single string format.
+  if (typeof additionalHooksConfig === 'string') {
+    return [{test: new RegExp(additionalHooksConfig), callbackIndex: 0}];
+  }
+
+  // An array format.
+  if (Array.isArray(additionalHooksConfig)) {
+    return additionalHooksConfig.map(({test, callbackIndex}) => ({
+        test: new RegExp(test),
+        callbackIndex,
+      }));
+  }
+  throw new Error('Unknown format of additionalHooks');
+}
 function fastFindReferenceWithParent(start, target) {
     const queue = [start];
     let item;
