diff --git a/node_modules/eslint/lib/rules/no-shadow.js b/node_modules/eslint/lib/rules/no-shadow.js
index a0b1db5..8d6730f 100644
--- a/node_modules/eslint/lib/rules/no-shadow.js
+++ b/node_modules/eslint/lib/rules/no-shadow.js
@@ -162,7 +162,99 @@ module.exports = {
             );
         }
 
-        /**
+      /**
+       * Traverse `node`s heirarchy up to level and check if the range is the same
+       * @param {Object} surroundingNode The node around `node`
+       * @param {Object} node The node suspected of shadowing
+       * @param {number} level At what level in the parent hierarchy to check
+       * @returns {boolean} Whether or not they have the same range
+       */
+      function hasSameRange(surroundingNode, node, level) {
+        let parent = node;
+
+        for (let i = 0; i < level; i++) {
+          parent = parent.parent;
+          if (!parent) {
+            return false;
+          }
+        }
+
+        if (
+          surroundingNode.range[0] === parent.range[0] &&
+          surroundingNode.range[1] === parent.range[1]
+        ) {
+          return true;
+        }
+
+        return false;
+      }
+
+      /**
+       * Checks whether the shadowing variable practically shadows
+       * @param {Object} shadowedVar The node being shadowed
+       * @param {Object} shadowingVar The node shadowing `shadowedVar`
+       * @returns {boolean} Whether or not the `shadowingVar` is practically inaccessible in the scope of shadowedVar
+       */
+      function isInaccessible(shadowedVar, shadowingVar) {
+        if (!(shadowedVar.defs[0] && shadowingVar.defs[0])) {
+          return false;
+        }
+
+        const shadowedNode = shadowedVar.defs[0].node;
+        const shadowNode = shadowingVar.defs[0].node;
+
+        // Skip variable declaration
+        if (shadowedNode.type === "VariableDeclarator") {
+          if (shadowNode.type === "ArrowFunctionExpression" || shadowNode.type === "FunctionDeclaration") {
+            if (
+
+              // a = (a) => ...
+              (shadowNode.parent.type !== "BlockStatement" &&
+                hasSameRange(shadowedNode, shadowNode, 2)) ||
+
+              // a = [].map(a => ...)
+              hasSameRange(shadowedNode, shadowNode, 4) ||
+              hasSameRange(shadowedNode, shadowNode, 5)
+            ) {
+              return true;
+            }
+          } else if (shadowNode.type === "VariableDeclarator" && shadowNode.parent.kind !== "var") {
+
+            // Inaccesible declaration eg. const { a } = (() => { const a = ...; return a })()
+            if (hasSameRange(shadowedNode, shadowNode, 5)) {
+              return true;
+            }
+          }
+        }
+
+        // Skip function param declaration eg. function func(a = [].find(a => true)) {}
+        if (
+          shadowedNode.type === "FunctionDeclaration" &&
+          (shadowNode.type === "ArrowFunctionExpression" || shadowNode.type === "FunctionDeclaration")
+        ) {
+          if (hasSameRange(shadowedNode, shadowNode, 3)) {
+            return true;
+          }
+        }
+
+
+        // Skip for loop context eg. for (const a of [].find(a => true)) {}
+        if (
+          shadowedNode.parent && shadowedNode.parent.parent &&
+          (shadowedNode.parent.parent.type === "ForOfStatement" || shadowedNode.parent.parent.type === "ForInStatement") &&
+
+          shadowNode.parent && shadowNode.parent.parent &&
+          (shadowNode.parent.parent.type === "ForOfStatement" || shadowNode.parent.parent.type === "ForInStatement")
+        ) {
+          if (hasSameRange(shadowedNode.parent.parent, shadowNode, 2)) {
+            return true;
+          }
+        }
+
+        return false;
+      }
+
+      /**
          * Checks the current context for shadowed variables.
          * @param {Scope} scope Fixme
          * @returns {void}
@@ -189,6 +281,10 @@ module.exports = {
                     !isOnInitializer(variable, shadowed) &&
                     !(options.hoist !== "all" && isInTdz(variable, shadowed))
                 ) {
+                    if (isInaccessible(shadowed, variable)) {
+                        continue;
+                    }
+
                     const location = getDeclaredLocation(shadowed);
                     const messageId = location.global ? "noShadowGlobal" : "noShadow";
                     const data = { name: variable.name };
