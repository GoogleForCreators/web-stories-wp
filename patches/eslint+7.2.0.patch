diff --git a/node_modules/eslint/lib/rules/no-shadow.js b/node_modules/eslint/lib/rules/no-shadow.js
index 1be8590..b6ef9b5 100644
--- a/node_modules/eslint/lib/rules/no-shadow.js
+++ b/node_modules/eslint/lib/rules/no-shadow.js
@@ -165,6 +165,83 @@ module.exports = {
                     !isOnInitializer(variable, shadowed) &&
                     !(options.hoist !== "all" && isInTdz(variable, shadowed))
                 ) {
+                    if (shadowed.defs[0]) {
+                        const shadowedNode = shadowed.defs[ 0 ].node;
+                        const shadowNode = variable.defs[ 0 ].node;
+
+                        // Skip variable declaration
+                        if (
+                            (shadowedNode.type === "VariableDeclarator") &&
+                            (shadowNode.type === "FunctionDeclaration" || shadowNode.type === "ArrowFunctionExpression") &&
+                            shadowNode.parent.type !== "BlockStatement" &&
+                            shadowNode.parent.parent
+                        ) {
+                            if (
+                                shadowedNode.range[0] === shadowNode.parent.parent.range[0] &&
+                                shadowedNode.range[1] === shadowNode.parent.parent.range[1]
+                            ) {
+                                continue;
+                            }
+                        }
+
+                        // Skip assignment in variable declaration
+                        if (
+                            shadowedNode.type === "VariableDeclarator" &&
+                            (shadowNode.type === "ArrowFunctionExpression" || shadowNode.type === "FunctionDeclaration") &&
+                            shadowNode.parent &&
+                            shadowNode.parent.parent &&
+                            shadowNode.parent.parent.parent &&
+                            shadowNode.parent.parent.parent.parent &&
+                            shadowedNode.range[0] === shadowNode.parent.parent.parent.parent.range[0] &&
+                            shadowedNode.range[1] === shadowNode.parent.parent.parent.parent.range[1]
+                        ) {
+                            continue;
+                        }
+                        if (
+                            shadowedNode.type === "VariableDeclarator" &&
+                            (shadowNode.type === "ArrowFunctionExpression" || shadowNode.type === "FunctionDeclaration") &&
+                            shadowNode.parent &&
+                            shadowNode.parent.parent &&
+                            shadowNode.parent.parent.parent &&
+                            shadowNode.parent.parent.parent.parent &&
+                            shadowNode.parent.parent.parent.parent.parent &&
+                            shadowedNode.range[0] === shadowNode.parent.parent.parent.parent.parent.range[0] &&
+                            shadowedNode.range[1] === shadowNode.parent.parent.parent.parent.parent.range[1]
+                        ) {
+                           continue;
+                        }
+
+                        // Skip for loop
+                        if (
+                            shadowedNode.parent &&
+                            shadowedNode.parent.parent &&
+                            (shadowedNode.parent.parent.type === "ForOfStatement" || shadowedNode.parent.parent.type === "ForInStatement") &&
+                            shadowNode.parent &&
+                            shadowNode.parent.parent &&
+                            (shadowNode.parent.parent.type === "ForOfStatement" || shadowNode.parent.parent.type === "ForInStatement")
+                        ) {
+                            if (
+                                shadowedNode.parent.parent.range[0] === shadowNode.parent.parent.range[0] &&
+                                shadowedNode.parent.parent.range[1] === shadowNode.parent.parent.range[1]
+                            ) {
+                               continue;
+                            }
+                        }
+
+                        // Skip function declaration;
+                        if (
+                            shadowedNode.type === "FunctionDeclaration" &&
+                            (shadowNode.type === "ArrowFunctionExpression" || shadowNode.type === "FunctionDeclaration") &&
+                            shadowNode.parent &&
+                            shadowNode.parent.parent &&
+                            shadowNode.parent.parent.parent &&
+                            shadowedNode.range[0] === shadowNode.parent.parent.parent.range[0] &&
+                            shadowedNode.range[1] === shadowNode.parent.parent.parent.range[1]
+                        ) {
+                            continue;
+                        }
+                    }
+
                     context.report({
                         node: variable.identifiers[0],
                         messageId: "noShadow",
