/*
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * External dependencies
 */
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { v4 as uuidv4 } from 'uuid';
import { useMemo, forwardRef } from '@googleforcreators/react';

/**
 * Internal dependencies
 */
import { Button as BaseButton } from '../../button';
import { useContextMenu } from '../contextMenuProvider';
import { menuItemStyles } from './styles';

const StyledButton = styled(BaseButton)`
  ${menuItemStyles};

  width: 100%;

  ${({ isHorizontal, isIconMenu, forcePadding, theme }) => {
    const hasHeight = isHorizontal; // In a horizontal menu, all buttons are 32px high
    const hasNoPadding = !forcePadding && (isHorizontal || isIconMenu);
    const hasBorderRadius = isHorizontal || isIconMenu;
    return {
      height: hasHeight && '32px',
      padding: hasNoPadding && 0,
      borderRadius: hasBorderRadius ? theme.borders.radius.small : 0,
    };
  }}

  :disabled {
    background-color: transparent;

    span {
      color: ${({ theme }) => theme.colors.fg.disable};
    }
  }

  :hover:not(:disabled) {
    background-color: ${({ theme }) =>
      theme.colors.interactiveBg.secondaryHover};
  }

  :active:not(:disabled) {
    background-color: ${({ theme }) =>
      theme.colors.interactiveBg.secondaryPress};
  }
`;

/**
 * A styled button for use in the context menu.
 *
 * @param {Object} props Attributes to pass to the button.
 * @param {string} props.id id attribute for the element
 * @param {Function} props.onBlur Blur event handler.
 * @param {Function} props.onClick Click event handler.
 * @param {boolean} props.dismissOnClick If to call onDismiss when clicking.
 * @param {Function} props.onFocus Focus event handler.
 * @param {boolean} props.forcePadding Force padding to button regardless of mode.
 * @param {Object} ref Ref object.
 * @return {Node} The react node
 */
const Button = forwardRef(function Button(
  {
    id,
    onBlur,
    onClick,
    onFocus,
    forcePadding = false,
    dismissOnClick = true,
    ...props
  },
  ref
) {
  const {
    focusedId,
    isIconMenu,
    isHorizontal,
    onDismiss,
    onMenuItemBlur,
    onMenuItemFocus,
  } = useContextMenu(({ state, actions }) => ({
    focusedId: state.focusedId,
    isIconMenu: state.isIconMenu,
    isHorizontal: state.isHorizontal,
    onDismiss: actions.onDismiss,
    onMenuItemBlur: actions.onMenuItemBlur,
    onMenuItemFocus: actions.onMenuItemFocus,
  }));
  const autoGeneratedId = useMemo(uuidv4, []);
  const elementId = id || autoGeneratedId;

  const handleBlur = (evt) => {
    onMenuItemBlur();
    onBlur?.(evt);
  };

  const handleClick = (evt) => {
    onClick(evt);
    dismissOnClick && onDismiss(evt);
  };

  const handleFocus = (evt) => {
    onMenuItemFocus(elementId);
    onFocus?.(evt);
  };

  return (
    <StyledButton
      ref={ref}
      id={elementId}
      tabIndex={focusedId === elementId ? 0 : -1}
      role="menuitem"
      isIconMenu={isIconMenu}
      isHorizontal={isHorizontal}
      forcePadding={forcePadding}
      onBlur={handleBlur}
      onClick={handleClick}
      onFocus={handleFocus}
      {...props}
    />
  );
});

Button.propTypes = {
  id: PropTypes.string,
  onBlur: PropTypes.func,
  onClick: PropTypes.func.isRequired,
  onFocus: PropTypes.func,
  forcePadding: PropTypes.bool,
  dismissOnClick: PropTypes.bool,
};

export default Button;
