{"version":3,"file":"story-editor.f2771eb7.iframe.bundle.js","mappings":";;AAoHA;;ACjEA;AAqEA","sources":["webpack://web-stories-wp/./packages/story-editor/src/components/panels/design/audioSticker/stickerType.js","webpack://web-stories-wp/./packages/story-editor/src/components/panels/design/audioSticker/stickerStyle.js"],"sourcesContent":["/*\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * External dependencies\n */\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport { useCallback } from '@googleforcreators/react';\nimport { __, sprintf } from '@googleforcreators/i18n';\nimport { AUDIO_STICKER_LABELS } from '@googleforcreators/element-library';\n\n/**\n * Internal dependencies\n */\nimport { useConfig } from '../../../../app/config';\nimport { Row, FilterToggle } from '../../../form';\nimport { SimplePanel } from '../../panel';\nimport { states, useHighlights } from '../../../../app/highlights';\nimport styles from '../../../../app/highlights/styles';\n\nexport const AudioStickerPreset = {\n  'headphone-cat': {\n    label: __('Headphone Cat', 'web-stories'),\n  },\n  'tape-player': {\n    label: __('Tape Player', 'web-stories'),\n  },\n  'loud-speaker': {\n    label: __('Loud Speaker', 'web-stories'),\n  },\n  'audio-cloud': {\n    label: __('Audio Cloud', 'web-stories'),\n  },\n};\n\nconst StickerImage = styled.img`\n  width: 100%;\n`;\n\nfunction StickerType({ selectedElements, pushUpdate }) {\n  const { cdnURL } = useConfig();\n\n  const stickerObj = selectedElements[0];\n\n  const { highlight, resetHighlight } = useHighlights((state) => ({\n    highlight: state[states.Style],\n    resetHighlight: state.onFocusOut,\n  }));\n\n  const onStickerTypeChange = useCallback(\n    (stickerType) => {\n      pushUpdate(\n        {\n          sticker: stickerType,\n        },\n        true\n      );\n    },\n    [pushUpdate]\n  );\n\n  return (\n    <SimplePanel\n      css={highlight?.showEffect && styles.FLASH}\n      onAnimationEnd={() => resetHighlight()}\n      name=\"audioStickerType\"\n      title={__('Type', 'web-stories')}\n      isPersistable={!highlight}\n      aria-labelledby={null}\n      aria-label={__('Audio Sticker Type', 'web-stories')}\n    >\n      <Row>\n        {Object.keys(AudioStickerPreset).map((type) => {\n          const { label } = AudioStickerPreset[type];\n          return (\n            <FilterToggle\n              key={type}\n              element={stickerObj}\n              label={label}\n              isToggled={type === stickerObj.sticker}\n              onClick={() => {\n                onStickerTypeChange(type);\n              }}\n              aria-label={sprintf(\n                /* translators: %s: Sticker type */\n                __('Sticker Type: %s', 'web-stories'),\n                label\n              )}\n            >\n              <StickerImage\n                src={`${cdnURL}images/audio-sticker/${type}-pretap.png`}\n                crossOrigin=\"anonymous\"\n                alt={AUDIO_STICKER_LABELS[type].label}\n              />\n            </FilterToggle>\n          );\n        })}\n      </Row>\n    </SimplePanel>\n  );\n}\n\nexport default StickerType;\n\nStickerType.propTypes = {\n  selectedElements: PropTypes.array,\n  pushUpdate: PropTypes.func,\n};\n","/*\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * External dependencies\n */\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport { useCallback } from '@googleforcreators/react';\nimport { __, sprintf } from '@googleforcreators/i18n';\nimport {\n  AUDIO_STICKER_STYLES,\n  AUDIO_STICKER_LABELS,\n} from '@googleforcreators/element-library';\n\n/**\n * Internal dependencies\n */\nimport { useConfig } from '../../../../app/config';\nimport { Row, FilterToggle } from '../../../form';\nimport { SimplePanel } from '../../panel';\nimport { states, useHighlights } from '../../../../app/highlights';\nimport styles from '../../../../app/highlights/styles';\n\nexport const AudioStickerStylePreset = {\n  none: {\n    label: __('None', 'web-stories'),\n  },\n  outline: {\n    label: __('Outline', 'web-stories'),\n  },\n  dropshadow: {\n    label: __('Drop shadow', 'web-stories'),\n  },\n};\n\nconst StickerImage = styled.img`\n  width: 100%;\n  ${({ stickerStyle }) => AUDIO_STICKER_STYLES[stickerStyle]}\n`;\n\nfunction StickerStyle({ selectedElements, pushUpdate }) {\n  const { cdnURL } = useConfig();\n\n  const stickerObj = selectedElements[0];\n  const style = stickerObj.style;\n  const type = stickerObj.sticker;\n\n  const { highlight, resetHighlight } = useHighlights((state) => ({\n    highlight: state[states.Style],\n    resetHighlight: state.onFocusOut,\n  }));\n\n  const onStickerStyleChange = useCallback(\n    (stickerStyle) => {\n      pushUpdate(\n        {\n          style: stickerStyle,\n        },\n        true\n      );\n    },\n    [pushUpdate]\n  );\n\n  return (\n    <SimplePanel\n      css={highlight?.showEffect && styles.FLASH}\n      onAnimationEnd={() => resetHighlight()}\n      name=\"audioStickerStyle\"\n      title={__('Style', 'web-stories')}\n      isPersistable={!highlight}\n      aria-labelledby={null}\n      aria-label={__('Audio Sticker Style', 'web-stories')}\n    >\n      <Row style={{ alignItems: 'flex-start' }}>\n        {Object.keys(AudioStickerStylePreset).map((stickerStyle) => {\n          const { label } = AudioStickerStylePreset[stickerStyle];\n          return (\n            <FilterToggle\n              key={stickerStyle}\n              element={selectedElements[0]}\n              label={label}\n              isToggled={stickerStyle === style}\n              onClick={() => {\n                onStickerStyleChange(stickerStyle);\n              }}\n              aria-label={sprintf(\n                /* translators: %s: Sticker style */\n                __('Sticker Style: %s', 'web-stories'),\n                label\n              )}\n            >\n              <StickerImage\n                src={`${cdnURL}images/audio-sticker/${type}-pretap.png`}\n                crossOrigin=\"anonymous\"\n                alt={AUDIO_STICKER_LABELS[type].label}\n                stickerStyle={stickerStyle}\n              />\n            </FilterToggle>\n          );\n        })}\n      </Row>\n    </SimplePanel>\n  );\n}\n\nexport default StickerStyle;\n\nStickerStyle.propTypes = {\n  selectedElements: PropTypes.array,\n  pushUpdate: PropTypes.func,\n};\n"],"names":[],"sourceRoot":""}