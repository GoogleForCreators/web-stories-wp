"use strict";(globalThis.webpackChunkweb_stories_wp=globalThis.webpackChunkweb_stories_wp||[]).push([[4622],{"./node_modules/html-to-image/es/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{getFontEmbedCSS:()=>getFontEmbedCSS,toBlob:()=>toBlob,toCanvas:()=>toCanvas,toJpeg:()=>toJpeg,toPixelData:()=>toPixelData,toPng:()=>toPng,toSvg:()=>toSvg});const WOFF="application/font-woff",mimes={woff:WOFF,woff2:WOFF,ttf:"application/font-truetype",eot:"application/vnd.ms-fontobject",png:"image/png",jpg:"image/jpeg",jpeg:"image/jpeg",gif:"image/gif",tiff:"image/tiff",svg:"image/svg+xml"};function getMimeType(url){const extension=function getExtension(url){const match=/\.([^./]*?)$/g.exec(url);return match?match[1]:""}(url).toLowerCase();return mimes[extension]||""}function isDataUrl(url){return-1!==url.search(/^(data:)/)}function makeDataUrl(content,mimeType){return`data:${mimeType};base64,${content}`}async function fetchAsDataURL(url,init,process){const res=await fetch(url,init);if(404===res.status)throw new Error(`Resource "${res.url}" not found`);const blob=await res.blob();return new Promise(((resolve,reject)=>{const reader=new FileReader;reader.onerror=reject,reader.onloadend=()=>{try{resolve(process({res,result:reader.result}))}catch(error){reject(error)}},reader.readAsDataURL(blob)}))}const cache={};async function resourceToDataURL(resourceUrl,contentType,options){const cacheKey=function getCacheKey(url,contentType,includeQueryParams){let key=url.replace(/\?.*/,"");return includeQueryParams&&(key=url),/ttf|otf|eot|woff2?/i.test(key)&&(key=key.replace(/.*\//,"")),contentType?`[${contentType}]${key}`:key}(resourceUrl,contentType,options.includeQueryParams);if(null!=cache[cacheKey])return cache[cacheKey];let dataURL;options.cacheBust&&(resourceUrl+=(/\?/.test(resourceUrl)?"&":"?")+(new Date).getTime());try{const content=await fetchAsDataURL(resourceUrl,options.fetchRequestInit,(({res,result})=>(contentType||(contentType=res.headers.get("Content-Type")||""),function getContentFromDataUrl(dataURL){return dataURL.split(/,/)[1]}(result))));dataURL=makeDataUrl(content,contentType)}catch(error){dataURL=options.imagePlaceholder||"";let msg=`Failed to fetch resource: ${resourceUrl}`;error&&(msg="string"==typeof error?error:error.message),msg&&console.warn(msg)}return cache[cacheKey]=dataURL,dataURL}const uuid=(()=>{let counter=0;return()=>(counter+=1,`u${`0000${(Math.random()*36**4<<0).toString(36)}`.slice(-4)}${counter}`)})();function toArray(arrayLike){const arr=[];for(let i=0,l=arrayLike.length;i<l;i++)arr.push(arrayLike[i]);return arr}function px(node,styleProperty){const val=(node.ownerDocument.defaultView||window).getComputedStyle(node).getPropertyValue(styleProperty);return val?parseFloat(val.replace("px","")):0}function getImageSize(targetNode,options={}){return{width:options.width||function getNodeWidth(node){const leftBorder=px(node,"border-left-width"),rightBorder=px(node,"border-right-width");return node.clientWidth+leftBorder+rightBorder}(targetNode),height:options.height||function getNodeHeight(node){const topBorder=px(node,"border-top-width"),bottomBorder=px(node,"border-bottom-width");return node.clientHeight+topBorder+bottomBorder}(targetNode)}}const canvasDimensionLimit=16384;function createImage(url){return new Promise(((resolve,reject)=>{const img=new Image;img.onerror=reject,img.crossOrigin="anonymous",img.decoding="sync",img.src=url,img.decode().then((()=>resolve(img))).catch(reject)}))}async function nodeToDataURL(node,width,height){const xmlns="http://www.w3.org/2000/svg",svg=document.createElementNS(xmlns,"svg"),foreignObject=document.createElementNS(xmlns,"foreignObject");return svg.setAttribute("width",`${width}`),svg.setAttribute("height",`${height}`),svg.setAttribute("viewBox",`0 0 ${width} ${height}`),foreignObject.setAttribute("width","100%"),foreignObject.setAttribute("height","100%"),foreignObject.setAttribute("x","0"),foreignObject.setAttribute("y","0"),foreignObject.setAttribute("externalResourcesRequired","true"),svg.appendChild(foreignObject),foreignObject.appendChild(node),async function svgToDataURL(svg){return Promise.resolve().then((()=>(new XMLSerializer).serializeToString(svg))).then(encodeURIComponent).then((html=>`data:image/svg+xml;charset=utf-8,${html}`))}(svg)}function getPseudoElementStyle(className,pseudo,style){const selector=`.${className}:${pseudo}`,cssText=style.cssText?function formatCSSText(style){const content=style.getPropertyValue("content");return`${style.cssText} content: '${content.replace(/'|"/g,"")}';`}(style):function formatCSSProperties(style){return toArray(style).map((name=>`${name}: ${style.getPropertyValue(name)}${style.getPropertyPriority(name)?" !important":""};`)).join(" ")}(style);return document.createTextNode(`${selector}{${cssText}}`)}function clonePseudoElement(nativeNode,clonedNode,pseudo){const style=window.getComputedStyle(nativeNode,pseudo),content=style.getPropertyValue("content");if(""===content||"none"===content)return;const className=uuid();try{clonedNode.className=`${clonedNode.className} ${className}`}catch(err){return}const styleElement=document.createElement("style");styleElement.appendChild(getPseudoElementStyle(className,pseudo,style)),clonedNode.appendChild(styleElement)}async function cloneSingleNode(node,options){return node instanceof HTMLCanvasElement?async function cloneCanvasElement(canvas){const dataURL=canvas.toDataURL();return"data:,"===dataURL?canvas.cloneNode(!1):createImage(dataURL)}(node):node instanceof HTMLVideoElement&&node.poster?async function cloneVideoElement(video,options){const poster=video.poster,contentType=getMimeType(poster);return createImage(await resourceToDataURL(poster,contentType,options))}(node,options):node.cloneNode(!1)}const isSlotElement=node=>null!=node.tagName&&"SLOT"===node.tagName.toUpperCase();function decorate(nativeNode,clonedNode){return clonedNode instanceof Element&&(!function cloneCSSStyle(nativeNode,clonedNode){const targetStyle=clonedNode.style;if(!targetStyle)return;const sourceStyle=window.getComputedStyle(nativeNode);sourceStyle.cssText?(targetStyle.cssText=sourceStyle.cssText,targetStyle.transformOrigin=sourceStyle.transformOrigin):toArray(sourceStyle).forEach((name=>{let value=sourceStyle.getPropertyValue(name);if("font-size"===name&&value.endsWith("px")){const reducedFont=Math.floor(parseFloat(value.substring(0,value.length-2)))-.1;value=`${reducedFont}px`}targetStyle.setProperty(name,value,sourceStyle.getPropertyPriority(name))}))}(nativeNode,clonedNode),function clonePseudoElements(nativeNode,clonedNode){clonePseudoElement(nativeNode,clonedNode,":before"),clonePseudoElement(nativeNode,clonedNode,":after")}(nativeNode,clonedNode),function cloneInputValue(nativeNode,clonedNode){nativeNode instanceof HTMLTextAreaElement&&(clonedNode.innerHTML=nativeNode.value),nativeNode instanceof HTMLInputElement&&clonedNode.setAttribute("value",nativeNode.value)}(nativeNode,clonedNode),function cloneSelectValue(nativeNode,clonedNode){if(nativeNode instanceof HTMLSelectElement){const clonedSelect=clonedNode,selectedOption=Array.from(clonedSelect.children).find((child=>nativeNode.value===child.getAttribute("value")));selectedOption&&selectedOption.setAttribute("selected","")}}(nativeNode,clonedNode)),clonedNode}async function cloneNode(node,options,isRoot){return isRoot||!options.filter||options.filter(node)?Promise.resolve(node).then((clonedNode=>cloneSingleNode(clonedNode,options))).then((clonedNode=>async function cloneChildren(nativeNode,clonedNode,options){var _a;const children=isSlotElement(nativeNode)&&nativeNode.assignedNodes?toArray(nativeNode.assignedNodes()):toArray((null!==(_a=nativeNode.shadowRoot)&&void 0!==_a?_a:nativeNode).childNodes);return 0===children.length||nativeNode instanceof HTMLVideoElement||await children.reduce(((deferred,child)=>deferred.then((()=>cloneNode(child,options))).then((clonedChild=>{clonedChild&&clonedNode.appendChild(clonedChild)}))),Promise.resolve()),clonedNode}(node,clonedNode,options))).then((clonedNode=>decorate(node,clonedNode))):null}const URL_REGEX=/url\((['"]?)([^'"]+?)\1\)/g,URL_WITH_FORMAT_REGEX=/url\([^)]+\)\s*format\((["']?)([^"']+)\1\)/g,FONT_SRC_REGEX=/src:\s*(?:url\([^)]+\)\s*format\([^)]+\)[,;]\s*)+/g;async function embed_resources_embed(cssText,resourceURL,baseURL,options,getContentFromUrl){try{const resolvedURL=baseURL?function resolveUrl(url,baseUrl){if(url.match(/^[a-z]+:\/\//i))return url;if(url.match(/^\/\//))return window.location.protocol+url;if(url.match(/^[a-z]+:/i))return url;const doc=document.implementation.createHTMLDocument(),base=doc.createElement("base"),a=doc.createElement("a");return doc.head.appendChild(base),doc.body.appendChild(a),baseUrl&&(base.href=baseUrl),a.href=url,a.href}(resourceURL,baseURL):resourceURL,contentType=getMimeType(resourceURL);let dataURL;if(getContentFromUrl){dataURL=makeDataUrl(await getContentFromUrl(resolvedURL),contentType)}else dataURL=await resourceToDataURL(resolvedURL,contentType,options);return cssText.replace(function toRegex(url){const escaped=url.replace(/([.*+?^${}()|\[\]\/\\])/g,"\\$1");return new RegExp(`(url\\(['"]?)(${escaped})(['"]?\\))`,"g")}(resourceURL),`$1${dataURL}$3`)}catch(error){}return cssText}function shouldEmbed(url){return-1!==url.search(URL_REGEX)}async function embedResources(cssText,baseUrl,options){if(!shouldEmbed(cssText))return cssText;const filteredCSSText=function filterPreferredFontFormat(str,{preferredFontFormat}){return preferredFontFormat?str.replace(FONT_SRC_REGEX,(match=>{for(;;){const[src,,format]=URL_WITH_FORMAT_REGEX.exec(match)||[];if(!format)return"";if(format===preferredFontFormat)return`src: ${src};`}})):str}(cssText,options),urls=function parseURLs(cssText){const urls=[];return cssText.replace(URL_REGEX,((raw,quotation,url)=>(urls.push(url),raw))),urls.filter((url=>!isDataUrl(url)))}(filteredCSSText);return urls.reduce(((deferred,url)=>deferred.then((css=>embed_resources_embed(css,url,baseUrl,options)))),Promise.resolve(filteredCSSText))}async function embedImages(clonedNode,options){clonedNode instanceof Element&&(await async function embedBackground(clonedNode,options){var _a;const background=null===(_a=clonedNode.style)||void 0===_a?void 0:_a.getPropertyValue("background");if(background){const cssString=await embedResources(background,null,options);clonedNode.style.setProperty("background",cssString,clonedNode.style.getPropertyPriority("background"))}}(clonedNode,options),await async function embedImageNode(clonedNode,options){if((!(clonedNode instanceof HTMLImageElement)||isDataUrl(clonedNode.src))&&(!(clonedNode instanceof SVGImageElement)||isDataUrl(clonedNode.href.baseVal)))return;const url=clonedNode instanceof HTMLImageElement?clonedNode.src:clonedNode.href.baseVal,dataURL=await resourceToDataURL(url,getMimeType(url),options);await new Promise(((resolve,reject)=>{clonedNode.onload=resolve,clonedNode.onerror=reject,clonedNode instanceof HTMLImageElement?(clonedNode.srcset="",clonedNode.src=dataURL):clonedNode.href.baseVal=dataURL}))}(clonedNode,options),await async function embedChildren(clonedNode,options){const deferreds=toArray(clonedNode.childNodes).map((child=>embedImages(child,options)));await Promise.all(deferreds).then((()=>clonedNode))}(clonedNode,options))}const cssFetchCache={};async function fetchCSS(url){let cache=cssFetchCache[url];if(null!=cache)return cache;const res=await fetch(url);return cache={url,cssText:await res.text()},cssFetchCache[url]=cache,cache}async function embedFonts(data,options){let cssText=data.cssText;const regexUrl=/url\(["']?([^"')]+)["']?\)/g,loadFonts=(cssText.match(/url\([^)]+\)/g)||[]).map((async loc=>{let url=loc.replace(regexUrl,"$1");return url.startsWith("https://")||(url=new URL(url,data.url).href),fetchAsDataURL(url,options.fetchRequestInit,(({result})=>(cssText=cssText.replace(loc,`url(${result})`),[loc,result])))}));return Promise.all(loadFonts).then((()=>cssText))}function parseCSS(source){if(null==source)return[];const result=[];let cssText=source.replace(/(\/\*[\s\S]*?\*\/)/gi,"");const keyframesRegex=new RegExp("((@.*?keyframes [\\s\\S]*?){([\\s\\S]*?}\\s*?)})","gi");for(;;){const matches=keyframesRegex.exec(cssText);if(null===matches)break;result.push(matches[0])}cssText=cssText.replace(keyframesRegex,"");const importRegex=/@import[\s\S]*?url\([^)]*\)[\s\S]*?;/gi,unifiedRegex=new RegExp("((\\s*?(?:\\/\\*[\\s\\S]*?\\*\\/)?\\s*?@media[\\s\\S]*?){([\\s\\S]*?)}\\s*?})|(([\\s\\S]*?){([\\s\\S]*?)})","gi");for(;;){let matches=importRegex.exec(cssText);if(null===matches){if(matches=unifiedRegex.exec(cssText),null===matches)break;importRegex.lastIndex=unifiedRegex.lastIndex}else unifiedRegex.lastIndex=importRegex.lastIndex;result.push(matches[0])}return result}async function parseWebFontRules(node,options){if(null==node.ownerDocument)throw new Error("Provided element is not within a Document");const styleSheets=toArray(node.ownerDocument.styleSheets),cssRules=await async function getCSSRules(styleSheets,options){const ret=[],deferreds=[];return styleSheets.forEach((sheet=>{if("cssRules"in sheet)try{toArray(sheet.cssRules||[]).forEach(((item,index)=>{if(item.type===CSSRule.IMPORT_RULE){let importIndex=index+1;const deferred=fetchCSS(item.href).then((metadata=>embedFonts(metadata,options))).then((cssText=>parseCSS(cssText).forEach((rule=>{try{sheet.insertRule(rule,rule.startsWith("@import")?importIndex+=1:sheet.cssRules.length)}catch(error){console.error("Error inserting rule from remote css",{rule,error})}})))).catch((e=>{console.error("Error loading remote css",e.toString())}));deferreds.push(deferred)}}))}catch(e){const inline=styleSheets.find((a=>null==a.href))||document.styleSheets[0];null!=sheet.href&&deferreds.push(fetchCSS(sheet.href).then((metadata=>embedFonts(metadata,options))).then((cssText=>parseCSS(cssText).forEach((rule=>{inline.insertRule(rule,sheet.cssRules.length)})))).catch((err=>{console.error("Error loading remote stylesheet",err.toString())}))),console.error("Error inlining remote css file",e.toString())}})),Promise.all(deferreds).then((()=>(styleSheets.forEach((sheet=>{if("cssRules"in sheet)try{toArray(sheet.cssRules||[]).forEach((item=>{ret.push(item)}))}catch(e){console.error(`Error while reading CSS rules from ${sheet.href}`,e.toString())}})),ret)))}(styleSheets,options);return function getWebFontRules(cssRules){return cssRules.filter((rule=>rule.type===CSSRule.FONT_FACE_RULE)).filter((rule=>shouldEmbed(rule.style.getPropertyValue("src"))))}(cssRules)}async function getWebFontCSS(node,options){const rules=await parseWebFontRules(node,options);return(await Promise.all(rules.map((rule=>{const baseUrl=rule.parentStyleSheet?rule.parentStyleSheet.href:null;return embedResources(rule.cssText,baseUrl,options)})))).join("\n")}async function toSvg(node,options={}){const{width,height}=getImageSize(node,options),clonedNode=await cloneNode(node,options,!0);await async function embedWebFonts(clonedNode,options){const cssText=null!=options.fontEmbedCSS?options.fontEmbedCSS:options.skipFonts?null:await getWebFontCSS(clonedNode,options);if(cssText){const styleNode=document.createElement("style"),sytleContent=document.createTextNode(cssText);styleNode.appendChild(sytleContent),clonedNode.firstChild?clonedNode.insertBefore(styleNode,clonedNode.firstChild):clonedNode.appendChild(styleNode)}}(clonedNode,options),await embedImages(clonedNode,options),function applyStyle(node,options){const{style}=node;options.backgroundColor&&(style.backgroundColor=options.backgroundColor),options.width&&(style.width=`${options.width}px`),options.height&&(style.height=`${options.height}px`);const manual=options.style;return null!=manual&&Object.keys(manual).forEach((key=>{style[key]=manual[key]})),node}(clonedNode,options);return await nodeToDataURL(clonedNode,width,height)}async function toCanvas(node,options={}){const{width,height}=getImageSize(node,options),svg=await toSvg(node,options),img=await createImage(svg),canvas=document.createElement("canvas"),context=canvas.getContext("2d"),ratio=options.pixelRatio||function getPixelRatio(){let ratio,FINAL_PROCESS;try{FINAL_PROCESS=process}catch(e){}const val=FINAL_PROCESS&&FINAL_PROCESS.env?FINAL_PROCESS.env.devicePixelRatio:null;return val&&(ratio=parseInt(val,10),Number.isNaN(ratio)&&(ratio=1)),ratio||window.devicePixelRatio||1}(),canvasWidth=options.canvasWidth||width,canvasHeight=options.canvasHeight||height;return canvas.width=canvasWidth*ratio,canvas.height=canvasHeight*ratio,options.skipAutoScale||function checkCanvasDimensions(canvas){(canvas.width>canvasDimensionLimit||canvas.height>canvasDimensionLimit)&&(canvas.width>canvasDimensionLimit&&canvas.height>canvasDimensionLimit?canvas.width>canvas.height?(canvas.height*=canvasDimensionLimit/canvas.width,canvas.width=canvasDimensionLimit):(canvas.width*=canvasDimensionLimit/canvas.height,canvas.height=canvasDimensionLimit):canvas.width>canvasDimensionLimit?(canvas.height*=canvasDimensionLimit/canvas.width,canvas.width=canvasDimensionLimit):(canvas.width*=canvasDimensionLimit/canvas.height,canvas.height=canvasDimensionLimit))}(canvas),canvas.style.width=`${canvasWidth}`,canvas.style.height=`${canvasHeight}`,options.backgroundColor&&(context.fillStyle=options.backgroundColor,context.fillRect(0,0,canvas.width,canvas.height)),context.drawImage(img,0,0,canvas.width,canvas.height),canvas}async function toPixelData(node,options={}){const{width,height}=getImageSize(node,options);return(await toCanvas(node,options)).getContext("2d").getImageData(0,0,width,height).data}async function toPng(node,options={}){return(await toCanvas(node,options)).toDataURL()}async function toJpeg(node,options={}){return(await toCanvas(node,options)).toDataURL("image/jpeg",options.quality||1)}async function toBlob(node,options={}){const canvas=await toCanvas(node,options),blob=await function canvasToBlob(canvas,options={}){return canvas.toBlob?new Promise((resolve=>{canvas.toBlob(resolve,options.type?options.type:"image/png",options.quality?options.quality:1)})):new Promise((resolve=>{const binaryString=window.atob(canvas.toDataURL(options.type?options.type:void 0,options.quality?options.quality:void 0).split(",")[1]),len=binaryString.length,binaryArray=new Uint8Array(len);for(let i=0;i<len;i+=1)binaryArray[i]=binaryString.charCodeAt(i);resolve(new Blob([binaryArray],{type:options.type?options.type:"image/png"}))}))}(canvas);return blob}async function getFontEmbedCSS(node,options={}){return getWebFontCSS(node,options)}}}]);