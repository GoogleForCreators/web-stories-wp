name: Continuous Integration

on:
  push:
    branches:
      - master
      - release/*
  pull_request:

jobs:
  phpcs:
    name: PHP Coding Standards
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'
          coverage: none
          tools: composer, cs2pr

      - name: Get Composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Setup Composer cache
        uses: pat-s/always-upload-cache@v1.1.4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-
            ${{ runner.os }}-

      - name: Validate composer.json
        run: composer --no-interaction validate --no-check-all

      - name: Install dependencies
        run: composer install --prefer-dist --no-suggest --no-progress --no-interaction

      - name: Detect coding standard violations (PHPCS)
        run: vendor/bin/phpcs -q --report=checkstyle --runtime-set ignore_errors_on_exit 1 --runtime-set ignore_warnings_on_exit 1 | cs2pr --graceful-warnings

      - name: Normalize composer.json
        # composer-normalize requires PHP 7.1+. Ignore version conflicts.
        run: |
          composer require --no-interaction --dev ergebnis/composer-normalize --ignore-platform-reqs
          composer --no-interaction normalize --dry-run

      - name: Static Analysis (PHPStan)
        # phpstan requires PHP 7.1+. Ignore version conflicts.
        run: |
          composer require --no-interaction --dev szepeviktor/phpstan-wordpress --ignore-platform-reqs
          vendor/bin/phpstan analyse --memory-limit=256M --error-format=checkstyle | cs2pr
        if: always()

  eslint:
    name: JavaScript Coding Standards
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Read .nvmrc
        run: echo "##[set-output name=NVMRC;]$(cat .nvmrc)"
        id: nvm

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: '${{ steps.nvm.outputs.NVMRC }}'

      - name: Setup npm cache
        uses: pat-s/always-upload-cache@v1.1.4
        with:
          path: node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-${{ env.cache-name }}-
            ${{ runner.os }}-npm-
            ${{ runner.os }}-

      - name: Install dependencies
        run: npm ci
        env:
          CI: true
          PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: true

      - name: Detect coding standard violations (ESLint)
        run: npm run lint:js:report
        continue-on-error: true

      - name: Annotate Code Linting Results
        uses: ataylorme/eslint-annotate-action@1.0.4
        with:
          repo-token: '${{ secrets.GITHUB_TOKEN }}'
          report-json: 'build/lint-js-report.json'

  markdownlint:
    name: Markdown Code Style
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Read .nvmrc
        run: echo "##[set-output name=NVMRC;]$(cat .nvmrc)"
        id: nvm

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: '${{ steps.nvm.outputs.NVMRC }}'

      - name: Setup npm cache
        uses: pat-s/always-upload-cache@v1.1.4
        with:
          path: node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-${{ env.cache-name }}-
            ${{ runner.os }}-npm-
            ${{ runner.os }}-

      - name: Install dependencies
        run: npm ci
        env:
          CI: true
          PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: true

      - name: Detect Markdown code style violations (MarkdownLint)
        run: npm run lint:md

  stylelint:
    name: CSS Coding Standards
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Read .nvmrc
        run: echo "##[set-output name=NVMRC;]$(cat .nvmrc)"
        id: nvm

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: '${{ steps.nvm.outputs.NVMRC }}'

      - name: Setup npm cache
        uses: pat-s/always-upload-cache@v1.1.4
        with:
          path: node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-${{ env.cache-name }}-
            ${{ runner.os }}-npm-
            ${{ runner.os }}-

      - name: Install dependencies
        run: npm ci
        env:
          CI: true
          PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: true

      - name: Detect coding standard violations (stylelint)
        run: npm run lint:css

  unit-js:
    name: JavaScript Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Read .nvmrc
        run: echo "##[set-output name=NVMRC;]$(cat .nvmrc)"
        id: nvm

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: ${{ steps.nvm.outputs.NVMRC }}

      - name: Setup npm cache
        uses: pat-s/always-upload-cache@v1.1.4
        with:
          path: node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-${{ env.cache-name }}-
            ${{ runner.os }}-npm-
            ${{ runner.os }}-

      - name: Setup Jest cache
        uses: actions/cache@v1
        id: cache-jest-cache
        with:
          path: .jest-cache
          key: ${{ runner.os }}-${{ steps.nvm.outputs.NVMRC }}-jest

      - name: Install dependencies
        run: npm ci
        env:
          CI: true
          PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: true

      - name: Run JavaScript unit tests
        run: npm run test:js -- --ci --cacheDirectory="$HOME/.jest-cache" --collectCoverage

      - name: Uplaod code coverage report
        uses: codecov/codecov-action@v1
        with:
          file: build/logs/lcov.info

  unit-php:
    name: PHP Unit Tests (PHP ${{ matrix.php }})
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mariadb:latest
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: true
          MYSQL_ROOT_PASSWORD:
          MYSQL_DATABASE: wordpress_test
        ports:
          - 3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    continue-on-error: ${{ matrix.experimental == true }}
    strategy:
      matrix:
        php: ['7.4', '7.0', '5.6']
        wp: ['latest']
        include:
          - php: '8.0'
            wp: 'trunk'
            experimental: true

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: mysql
          coverage: xdebug
          tools: composer, cs2pr

      - name: Shutdown default MySQL service
        run: sudo service mysql stop

      - name: Verify MariaDB connection
        run: |
          while ! mysqladmin ping -h"127.0.0.1" -P"${{ job.services.mysql.ports[3306] }}" --silent; do
            sleep 1
          done

      - name: Get Composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Setup Composer cache
        uses: pat-s/always-upload-cache@v1.1.4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-
            ${{ runner.os }}-

      - name: Install dependencies
        run: composer install --prefer-dist --no-suggest --no-progress --no-interaction

      - name: Set up tests
        run: bash bin/install-wp-tests.sh wordpress_test root '' 127.0.0.1:${{ job.services.mysql.ports['3306'] }} ${{ matrix.wp }} true

      - name: Run tests
        run: npm run test:php
        if: ${{ matrix.wp != 'latest' || matrix.php != 7.4 }}

      - name: Run tests with coverage
        run: npm run test:php -- --coverage-clover build/logs/clover.xml
        if: ${{ matrix.wp == 'latest' && matrix.php == 7.4 }}

      - name: Uplaod code coverage report
        uses: codecov/codecov-action@v1
        with:
          file: build/logs/clover.xml
        if: ${{ matrix.wp == 'latest' && matrix.php == 7.4 }}

  e2e:
    name: E2E Tests (${{ matrix.browser }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        browser: ['chrome', 'firefox']

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # See https://github.com/puppeteer/puppeteer/blob/master/docs/troubleshooting.md#chrome-headless-doesnt-launch-on-unix
      - name: Install libgbm1
        run: sudo apt-get install libgbm1

      - name: Read .nvmrc
        run: echo "##[set-output name=NVMRC;]$(cat .nvmrc)"
        id: nvm

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: '${{ steps.nvm.outputs.NVMRC }}'

      - name: Setup npm cache
        uses: pat-s/always-upload-cache@v1.1.4
        with:
          path: node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-${{ env.cache-name }}-
            ${{ runner.os }}-npm-
            ${{ runner.os }}-

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'
          coverage: none
          tools: composer

      - name: Get Composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Setup Composer cache
        uses: pat-s/always-upload-cache@v1.1.4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-
            ${{ runner.os }}-

      - name: Install dependencies
        run: |
          npm ci
          composer install --prefer-dist --no-suggest --no-progress --no-interaction
        env:
          CI: true
          PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: true

      - name: Install Puppeteer with correct browser
        run: npm install puppeteer
        env:
          PUPPETEER_PRODUCT: ${{ matrix.browser }}

      - name: Build plugin
        run: npm run build:js

      - name: Start Docker environment
        run: npm run env:start
        env:
          COMPOSE_INTERACTIVE_NO_CLI: true

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          PUPPETEER_PRODUCT: ${{ matrix.browser }}

      - name: Stop Docker environment
        run: npm run env:stop
        env:
          COMPOSE_INTERACTIVE_NO_CLI: true

  build:
    name: Build plugin
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Read .nvmrc
        run: echo "##[set-output name=NVMRC;]$(cat .nvmrc)"
        id: nvm

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: '${{ steps.nvm.outputs.NVMRC }}'

      - name: Setup npm cache
        uses: pat-s/always-upload-cache@v1.1.4
        with:
          path: node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-${{ env.cache-name }}-
            ${{ runner.os }}-npm-
            ${{ runner.os }}-

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'
          coverage: none
          tools: composer

      - name: Get Composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Setup Composer cache
        uses: pat-s/always-upload-cache@v1.1.4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-
            ${{ runner.os }}-

      - name: Install dependencies
        run: |
          npm ci
          composer install --prefer-dist --no-suggest --no-progress --no-interaction
        env:
          CI: true
          PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: true

      - name: Bundle plugin
        run: |
          echo 'assets/images/templates' >> .distignore
          npm run build:js
          npm run workflow:build-plugin -- --cdn
          npm run workflow:bundle-plugin web-stories-composer.zip -- --composer --skip-delete
          npm run workflow:bundle-plugin web-stories.zip -- --skip-delete

      - name: Bundle development version
        run: |
          rm -rf assets/css/* assets/js/*
          NODE_ENV=development npx webpack
          npm run workflow:build-plugin
          npm run workflow:bundle-plugin web-stories-dev.zip -- --skip-delete

      - name: Upload full bundle
        uses: actions/upload-artifact@v2
        with:
          name: web-stories.zip
          path: build/web-stories.zip

      - name: Upload composer bundle
        uses: actions/upload-artifact@v2
        with:
          name: web-stories-composer.zip
          path: build/web-stories-composer.zip

      - name: Upload development bundle
        uses: actions/upload-artifact@v2
        with:
          name: web-stories-dev.zip
          path: build/web-stories-dev.zip

      - name: Upload bundles in combined ZIP file
        uses: actions/upload-artifact@v2
        with:
          name: All ZIP Files
          path: build/*.zip

  bundle-size:
    name: Bundle size check
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'push' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Bundle size check
        uses: preactjs/compressed-size-action@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          pattern: '{assets/js/*.js,assets/css/*.css}'
          build-script: 'build:js'

  deploy-to-wiki:
    name: Deploy QA artifacts
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          repository: ${{ github.repository }}.wiki
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download combined ZIP file
        uses: actions/download-artifact@v2
        with:
          name: All ZIP Files
          path: ${{ github.ref }}

      - name: Commit updates
        run: |
          git add .
          git status
          git commit -m "Build and publish ${{ github.ref }}"
          git pull --no-edit --quiet
          git push origin master
        env:
          GIT_AUTHOR_EMAIL: ${{ github.actor }}@users.noreply.github.com
          GIT_AUTHOR_NAME: ${{ github.actor }}
          GIT_COMMITTER_EMAIL: ${{ github.actor }}@users.noreply.github.com
          GIT_COMMITTER_NAME: ${{ github.actor }}
