name: Continuous Integration

on: pull_request

jobs:
  phpcs:
    name: PHP Coding Standards
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'
          coverage: none
          tools: composer, cs2pr

      - name: Get Composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Setup cache
        uses: pat-s/always-upload-cache@v1.1.4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Validate composer.json
        run: composer --no-interaction validate --no-check-all

      - name: Install dependencies
        run: composer install --prefer-dist --no-suggest --no-progress

      - name: Detect coding standard violations (PHPCS)
        run: vendor/bin/phpcs -q --report=checkstyle --runtime-set ignore_errors_on_exit 1 --runtime-set ignore_warnings_on_exit 1 | cs2pr --graceful-warnings

      - name: Normalize composer.json
        # composer-normalize requires PHP 7.1+. Ignore version conflicts.
        run: |
          composer require --no-interaction --dev ergebnis/composer-normalize --ignore-platform-reqs
          composer --no-interaction normalize --dry-run

      - name: Static Analysis (PHPStan)
        # phpstan requires PHP 7.1+. Ignore version conflicts.
        run: |
          composer require --no-interaction --dev szepeviktor/phpstan-wordpress --ignore-platform-reqs
          vendor/bin/phpstan analyse --memory-limit=256M --error-format=checkstyle | cs2pr
        if: always()

  eslint:
    name: JavaScript Coding Standards
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Read .nvmrc
        run: echo "##[set-output name=NVMRC;]$(cat .nvmrc)"
        id: nvm

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: "${{ steps.nvm.outputs.NVMRC }}"

      - name: Setup cache
        uses: pat-s/always-upload-cache@v1.1.4
        with:
          path: node_modules
          key: ${{ runner.OS }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-npm-${{ env.cache-name }}-
            ${{ runner.OS }}-npm-
            ${{ runner.OS }}-

      - name: Install dependencies
        run: npm install
        env:
          CI: TRUE

      - name: Detect coding standard violations (ESLint)
        run: npm run lint:js:report
        continue-on-error: true

      - name: Annotate Code Linting Results
        uses: ataylorme/eslint-annotate-action@1.0.4
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          report-json: "build/lint-js-report.json"

  markdownlint:
    name: Markdown Code Style
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Read .nvmrc
        run: echo "##[set-output name=NVMRC;]$(cat .nvmrc)"
        id: nvm

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: "${{ steps.nvm.outputs.NVMRC }}"

      - name: Setup cache
        uses: pat-s/always-upload-cache@v1.1.4
        with:
          path: node_modules
          key: ${{ runner.OS }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-npm-${{ env.cache-name }}-
            ${{ runner.OS }}-npm-
            ${{ runner.OS }}-

      - name: Install dependencies
        run: npm install
        env:
          CI: TRUE

      - name: Detect Markdown code style violations (MarkdownLint)
        run: npm run lint:md

  stylelint:
    name: CSS Coding Standards
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Read .nvmrc
        run: echo "##[set-output name=NVMRC;]$(cat .nvmrc)"
        id: nvm

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: "${{ steps.nvm.outputs.NVMRC }}"

      - name: Setup cache
        uses: pat-s/always-upload-cache@v1.1.4
        with:
          path: node_modules
          key: ${{ runner.OS }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-npm-${{ env.cache-name }}-
            ${{ runner.OS }}-npm-
            ${{ runner.OS }}-

      - name: Install dependencies
        run: npm install
        env:
          CI: TRUE

      - name: Detect coding standard violations (stylelint)
        run: npm run lint:css

  bundle-size:
    name: Bundle size check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: preactjs/compressed-size-action@v1
        with:
          repo-token: '${{ secrets.GITHUB_TOKEN }}'
          pattern: '{assets/js/*.js,assets/css/*.css}'
          # Todo: compare final plugin ZIP file size too.
          build-script: 'build:js'

  build:
    name: Build plugin
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Read .nvmrc
        run: echo "##[set-output name=NVMRC;]$(cat .nvmrc)"
        id: nvm

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: "${{ steps.nvm.outputs.NVMRC }}"

      - name: Setup npm cache
        uses: pat-s/always-upload-cache@v1.1.4
        with:
          path: node_modules
          key: ${{ runner.OS }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-npm-${{ env.cache-name }}-
            ${{ runner.OS }}-npm-
            ${{ runner.OS }}-

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'
          coverage: none
          tools: composer

      - name: Get Composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Setup Composer cache
        uses: pat-s/always-upload-cache@v1.1.4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install dependencies
        run: npm install
        env:
          CI: TRUE

      - name: Bundle plugin
        run: |
          npm run build:plugin
          npm run bundle-plugin web-stories.zip
          npm run bundle-plugin web-stories-composer.zip -- --composer

      - name: Upload full bundle
        uses: actions/upload-artifact@v1
        with:
          name: web-stories.zip
          path: build/web-stories.zip

      - name: Upload composer bundle
        uses: actions/upload-artifact@v1
        with:
          name: web-stories-composer.zip
          path: build/web-stories-composer.zip
