{
  "root": true,
  "parser": "@babel/eslint-parser",
  "extends": [
    "plugin:@wordpress/eslint-plugin/i18n",
    "eslint:recommended",
    "plugin:import/recommended",
    "plugin:eslint-comments/recommended",
    "plugin:react/recommended",
    "plugin:prettier/recommended",
    "prettier/react",
    "plugin:jsx-a11y/recommended",
    "plugin:jsdoc/recommended"
  ],
  "plugins": [
    "@babel",
    "@wordpress",
    "header",
    "jsdoc",
    "jsx-a11y",
    "react",
    "react-hooks"
  ],
  "parserOptions": {
    "ecmaFeatures": {
      "jsx": true
    }
  },
  "rules": {
    "block-scoped-var": "error",
    "complexity": ["error", {"max": 20}],
    "consistent-return": "error",
    "curly": ["error", "all"],
    "default-case": "error",
    "guard-for-in": "error",
    "no-await-in-loop": "error",
    "no-extra-bind": "error",
    "no-extra-label": "error",
    "no-floating-decimal": "error",
    "no-implicit-coercion": "error",
    "no-implicit-globals": "error",
    "no-implied-eval": "error",
    "no-loop-func": "error",
    "no-new": "error",
    "no-new-func": "error",
    "no-new-wrappers": "error",
    "header/header": [ "error", "block", [
      "",
      {
        "pattern": " \\* Copyright \\d{4} Google LLC",
        "template": " * Copyright 2020 Google LLC"
      },
      " *",
      " * Licensed under the Apache License, Version 2.0 (the \"License\");",
      " * you may not use this file except in compliance with the License.",
      " * You may obtain a copy of the License at",
      " *",
      " *     https://www.apache.org/licenses/LICENSE-2.0",
      " *",
      " * Unless required by applicable law or agreed to in writing, software",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
      " * See the License for the specific language governing permissions and",
      " * limitations under the License.",
      " "
    ] ],
    "import/no-restricted-paths": [ "error", {
      "zones": [ {
        "target": "./assets/src/edit-story/migration/migrations",
        "from": "./assets/src/edit-story",
        "except": [ "./migration/migrations" ]
      }, {
        "target": "./assets/src/edit-story",
        "from": "./assets/src/edit-story/utils/useWhyDidYouUpdate.js"
      } ]
    } ],
    "import/dynamic-import-chunkname": [ "error", {
      "webpackChunknameFormat": "[0-9a-zA-Z-_/.[\\]]+"
    } ],
    "no-restricted-properties": "error",
    "no-return-assign": "error",
    "no-return-await": "error",
    "no-sequences": "error",
    "no-shadow": "error",
    "no-template-curly-in-string": "error",
    "no-throw-literal": "error",
    "no-unmodified-loop-condition": "error",
    "no-unused-vars": [
      "error",
      {
        "ignoreRestSiblings": true
      }
    ],
    "no-useless-call": "error",
    "no-useless-concat": "error",
    "no-console": "error",
    "prefer-object-spread": "error",
    "prefer-promise-reject-errors": "error",
    "prefer-rest-params": "error",
    "prefer-spread": "error",
    "radix": ["error", "as-needed"],
    "require-await": "error",
    "rest-spread-spacing": ["error", "never"],
    "react/prop-types": "error",
    "react-hooks/rules-of-hooks": "error",
    "react-hooks/exhaustive-deps": [
      "error",
      {
        "enableDangerousAutofixThisMayCauseInfiniteLoops": false,
        "additionalHooks": [
          {
            "test": "useSelect$",
            "callbackIndex": 0
          },
          {
            "test": "useBatchingCallback",
            "callbackIndex": 0
          },
          {
            "test": "useKeyEffectInternal",
            "callbackIndex": 3
          },
          {
            "test": "useKeyEffect",
            "callbackIndex": 2
          },
          {
            "test": "useKeyDownEffect",
            "callbackIndex": 2
          },
          {
            "test": "useKeyUpEffect",
            "callbackIndex": 2
          },
          {
            "test": "useGlobalKeyDownEffect",
            "callbackIndex": 1
          },
          {
            "test": "useGlobalKeyUpEffect",
            "callbackIndex": 1
          },
          {
            "test": "useIntersectionEffect",
            "callbackIndex": 2
          },
          {
            "test": "useResizeEffect",
            "callbackIndex": 1
          }
        ]
      }
    ],
    "react/jsx-fragments": "error",
    "react/jsx-no-literals": "error",
    "react/jsx-no-useless-fragment": "error",
    "react/no-unused-prop-types": "error",
    "react/react-in-jsx-scope": "off",
    "react/self-closing-comp": "error",
    "import/no-extraneous-dependencies": "error",
    "import/no-unresolved": "error",
    "import/order": [
      "error",
      {
        "groups": [
          "builtin",
          ["external", "unknown"],
          "internal",
          "parent",
          "sibling",
          "index"
        ]
      }
    ],
    "jsdoc/check-indentation": "error",
    "jsdoc/check-syntax": "warn",
    "jsdoc/require-jsdoc": ["off", {
      "publicOnly": true
    }],
    "jsdoc/require-returns": "warn",
    "jsdoc/require-param-description": "warn",
    "eslint-comments/no-unused-disable": "error",
    "@wordpress/dependency-group": "error",
    "@wordpress/no-unused-vars-before-return": ["error", {
      "excludePattern": "^use"
    }],
    "@wordpress/react-no-unsafe-timeout": "error",
    "@wordpress/i18n-text-domain": ["error", {
      "allowedTextDomain": "web-stories"
    }],
    "@wordpress/valid-sprintf": "error"
  },
  "env": {
    "browser": true,
    "es6": true
  },
  "globals": {
    "global": true,
    "window": true,
    "document": true,
    "wp": "readonly",
    "process": "readonly",
    "__webpack_public_path__": true
  },
  "settings": {
    "jsdoc": {
      "mode": "typescript",
      "preferredTypes": {
        "object": "Object"
      },
      "tagNamePreference": {
        "returns": "return",
        "yields": "yield"
      }
    },
    "react": {
      "version": "detect"
    },
    "linkComponents": [
      "Link",
      {"name": "Plain", "linkAttribute": "href"},
      {"name": "Primary", "linkAttribute": "href"},
      "PrimaryLink",
      "SecondaryLink",
      "ExternalLink"
    ]
  },
  "overrides": [
    {
      "files": [
        "__mocks__/**/*.js",
        "**/__tests__/**/*.js",
        "**/test/**/*.js",
        "**/?(*.)test.js",
        "tests/js/**/*.js"
      ],
      "excludedFiles": [
        "**/karma/**/*.js",
        "**/test/**/*.karma.js"
      ],
      "extends": [
        "plugin:jest/all",
        "plugin:testing-library/recommended",
        "plugin:jest-dom/recommended"
      ],
      "plugins": [
        "jsx-a11y",
        "header",
        "testing-library",
        "jest-dom"
      ],
      "rules": {
        "jest/lowercase-name": [
          "error",
          {
            "ignore": ["describe"]
          }
        ],
        "jest/no-hooks": "off",
        "jest/prefer-expect-assertions": "off",
        "jest/prefer-inline-snapshots": "off",
        "jsdoc/require-jsdoc": "off",
        "testing-library/no-debug": "error",
        "testing-library/no-dom-import": "error"
      }
    },
    {
      "files": [
        "**/karma/**/*.js"
      ],
      "extends": [
        "plugin:jasmine/recommended"
      ],
      "plugins": [
        "jsx-a11y",
        "header",
        "testing-library",
        "jasmine"
      ],
      "env": {
        "jasmine": true
      },
      "rules": {
        "testing-library/no-debug": "error",
        "testing-library/no-dom-import": "error",
        "jasmine/new-line-before-expect": "off",
        "jasmine/no-disabled-tests": "error",
        "jasmine/no-spec-dupes": ["error", "branch"],
        "jasmine/no-suite-dupes": ["error", "branch"],
        "jsdoc/require-jsdoc": "off",
        "no-restricted-imports": [
          "error",
          {
            "paths": [
              {
                "name": "@testing-library/react-hooks",
                "message": "Use karma fixtures instead."
              }
            ]
          }
        ]
      },
      "globals": {
        "karmaPuppeteer": "readonly",
        "karmaSnapshot": "readonly"
      }
    },
    {
      "files": ["tests/e2e/**/*.js"],
      "extends": [
        "plugin:jest/all"
      ],
      "rules": {
        "jest/lowercase-name": [
          "error",
          {
            "ignore": ["describe"]
          }
        ],
        "jest/no-hooks": "off",
        "jest/prefer-expect-assertions": "off",
        "jest/prefer-inline-snapshots": "off"
      },
      "globals": {
        "browser": "readonly",
        "page": "readonly",
        "wp": "readonly"
      }
    },
    {
      "files": ["tests/e2e/specs/**/*.js"],
      "rules": {
        "jsdoc/require-jsdoc": "off"
      }
    },
    {
      "files": [
        "__mocks__/**/*.js",
        "bin/**/*.js",
        "babel.config.cjs",
        "jest-puppeteer.config.cjs",
        "karma-*.config.cjs",
        "webpack.*.cjs",
        ".storybook/*.cjs",
        ".storybook/*.js",
        "tests/js/*.js",
        "tests/e2e/*.js",
        "tests/e2e/config/*.js",
        "assets/src/dashboard/karma-tests.cjs",
        "assets/src/edit-story/karma-tests.cjs"
      ],
      "env": {
        "node": true
      }
    },
    {
      "files": [
        "*.md",
        "**/*.md"
      ],
      "plugins": [
        "markdown"
      ],
      "rules": {
        "@wordpress/dependency-group": "off",
        "no-undef": "off",
        "no-unused-vars": "off",
        "header/header": "off",
        "prettier/prettier": "off"
      }
    }
  ]
}
